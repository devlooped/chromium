<Project>

  <PropertyGroup>
    <RestoreSources Condition="Exists('$(MSBuildThisFileDirectory)..\bin')">$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\bin'));$(RestoreSources)</RestoreSources>
    <RestoreSources Condition="Exists('$(MSBuildThisFileDirectory)..\..\nugetizer\bin')">$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\..\nugetizer\bin'));$(RestoreSources)</RestoreSources>
  </PropertyGroup>

 <!--
  ==============================================================
    DumpItems Task
    Helper task useful for quickly inspecting the full metadata
    of arbitrary items in any target.
    Properties:
    - Items: Microsoft.Build.Framework.ITaskItem[] (Input, Required)
    - ItemName: string (Input, Optional)
	==============================================================
  -->
  <UsingTask TaskName="DumpItems" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <ItemName />
    </ParameterGroup>
    <Task>
      <Reference Include="Microsoft.Build" />
      <Reference Include="Microsoft.CSharp" />
      <Reference Include="System" />
      <Reference Include="System.Core" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Using Namespace="System" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
			  var itemName = ItemName ?? "Item";
			  if (Items.Length == 0)
				  Log.LogMessage(MessageImportance.High, "No {0} items received to dump.", ItemName ?? "");
			  else
				  Log.LogMessage(MessageImportance.High, "Dumping {0} {1} items.", Items.Length, ItemName ?? "");
			  foreach (var item in Items.OrderBy(i => i.ItemSpec))
			  {
				  Log.LogMessage(MessageImportance.High, "{0}: {1}", itemName, item.ItemSpec);
				  foreach (var name in item.MetadataNames.OfType<string>().OrderBy(_ => _))
				  {
					  try
					  {
						  Log.LogMessage(MessageImportance.High, "\t{0}={1}", name, item.GetMetadata(name));
					  }
					  catch { }
				  }
			  }
      ]]>
      </Code>
    </Task>
  </UsingTask>
    
</Project>